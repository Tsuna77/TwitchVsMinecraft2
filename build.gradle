buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'

version = "${mod_version}"
group = 'io.github.icrazyblaze.twitchmod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'twitchmod'

repositories {
    // Put remote maven repositories here
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
}

minecraft {
    // MCPBot is dead. Do not use that to check for updates.
    // if you want the absolute latest mapping, run ` gradlew -PUPDATE_MAPPINGS="20200916-1.16.2" updateMappings `
    // command for the project and it'll remap everything to the cutting-edge mappings!
    mappings channel: 'snapshot', version: "${mapping}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')


    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            mods { twitchmod { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            mods { twitchmod { source sourceSets.main } }
        }
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // PircBotX has many dependencies that we already have downloaded
    compile shadow (group: 'com.github.pircbotx', name: 'pircbotx', version: '2.2') {
        transitive = false
    }

    compile shadow (group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30')

    // JDA without audio
    compile shadow (group: 'net.dv8tion', name: 'JDA', version: '4.2.0_212') {
        transitive = true
        exclude module: 'opus-java'
        exclude group: 'org.slf4j', module: 'slf4j-api' // we already have this
    }

}

def repack(it) {
    shadowJar.relocate(it, "repack.${it}")
}

shadowJar {

    repack 'org.pircbotx'
    repack "net.dv8tion.jda"
    repack 'org.apache.commons.collections4'
    repack 'gnu.trove'
    repack "com.neovisionaries.ws.client"
    repack "com.iwebpp.crypto"
    repack "org.json"
    repack "okio"
    repack "okhttp3"
    repack "org.slf4j"
    repack "com.fasterxml.jackson"

    classifier ''
    configurations = [project.configurations.shadow]
    dependencies{
        exclude(dependency('org.jetbrains:annotations'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }

}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "icrazyblaze",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "icrazyblaze",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}

processResources {
    // Will allow gradle.properties version fill inside mods.toml file
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version': project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

}
tasks.assemble.dependsOn shadowJar