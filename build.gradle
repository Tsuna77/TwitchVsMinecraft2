buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    }
}
apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "com.github.johnrengelman.shadow"

version = "${mod_version}"
group = "io.github.icrazyblaze.twitchmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "twitchmod"

repositories {
    // Put remote maven repositories here
    mavenCentral()
    maven { url "https://jitpack.io" }
    jcenter()
}

minecraft {
    // MCPBot is dead. Do not use that to check for updates.
    // if you want the absolute latest mapping, run `gradlew -PUPDATE_MAPPINGS="20201028-1.16.3" updateMappings`
    mappings channel: "snapshot", version: "${mapping}"

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")
            // Recommended logging data for a userdev environment
//            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            mods { twitchmod { source sourceSets.main } }
        }

        server {
            workingDirectory project.file("run")
            // Recommended logging data for a userdev environment
//            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            mods { twitchmod { source sourceSets.main } }
        }
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then "net.minecraft" it is assumed
    // that the dep is a ForgeGradle "patcher" dependency. And it"s patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // PircBotX has many dependencies that we already have downloaded
    compile shadow (group: "com.github.pircbotx", name: "pircbotx", version: "2.2") {
        transitive = false
    }

    compile shadow (group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.30")

    // JDA without audio
    compile shadow (group: "net.dv8tion", name: "JDA", version: "4.2.0_223") {
        transitive = true
        exclude module: "opus-java"
        exclude group: "org.slf4j", module: "slf4j-api" // we already have this
    }

}

def repack(rp) {
    rp.each { shadowJar.relocate(it, "repack.${it}") }
}

shadowJar {

    def list = ["org.pircbotx", "net.dv8tion.jda", "org.apache.commons.collections4", "gnu.trove", "com.neovisionaries.ws.client", "com.iwebpp.crypto", "org.json", "okio", "okhttp3", "org.slf4j", "com.fasterxml.jackson"]
    repack list

    classifier ''
    configurations = [project.configurations.shadow]
    dependencies{
        exclude(dependency("org.jetbrains:annotations"))
        exclude(dependency("com.google.code.findbugs:jsr305"))
    }

}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "icrazyblaze",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "icrazyblaze",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}

tasks.assemble.dependsOn shadowJar