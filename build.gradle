buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}
apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "com.github.johnrengelman.shadow"
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'
import net.minecraftforge.gradle.common.tasks.SignJar

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

version = mod_version
group = package_group
archivesBaseName = mod_id

repositories {
    // Put remote maven repositories here
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name "m2-dv8tion"
        url "https://m2.dv8tion.net/releases"
    }
}

minecraft {

    mappings channel: "official", version: "${mc_version}"

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")

            mods { twitchmod { source sourceSets.main } }
        }

        server {
            workingDirectory project.file("run")

            mods { twitchmod { source sourceSets.main } }
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // PircBotX has many dependencies that we already have downloaded
    implementation shadow (group: "com.github.pircbotx", name: "pircbotx", version: "2.2") {
        transitive = false
    }

    // JDA without audio
    implementation shadow (group: "net.dv8tion", name: "JDA", version: "4.3.0_298") {
        transitive = true
        exclude module: "opus-java"
        exclude group: "org.slf4j", module: "slf4j-api" // we already have this
    }

    implementation('cpw.mods:securejarhandler') { version { strictly '0.9.45' } }

}

def repack(rp) {
    rp.each { shadowJar.relocate(it, "repack.${it}") }
}

shadowJar {

    def list = ["org.pircbotx", "net.dv8tion.jda", "org.apache.commons.collections4", "gnu.trove", "com.neovisionaries.ws.client", "com.iwebpp.crypto", "org.json", "okio", "okhttp3", "org.slf4j", "com.fasterxml.jackson"]
    repack list

    classifier ''
    configurations = [project.configurations.shadow]
    dependencies{
        exclude(dependency("org.jetbrains:annotations"))
        exclude(dependency("com.google.code.findbugs:jsr305"))
    }

}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${author}",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "${author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}

task signJar(type: SignJar, dependsOn: jar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

tasks.assemble.dependsOn shadowJar
tasks.build.dependsOn signJar